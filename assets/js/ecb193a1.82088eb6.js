"use strict";(self.webpackChunkmlops_pipeline=self.webpackChunkmlops_pipeline||[]).push([[16],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},305:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:1},o="Welcome",l={unversionedId:"developer-guide/welcome",id:"developer-guide/welcome",title:"Welcome",description:"MLOps pipeline",source:"@site/docs/developer-guide/welcome.md",sourceDirName:"developer-guide",slug:"/developer-guide/welcome",permalink:"/mlops-pipeline/developer-guide/welcome",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Developer Guide",permalink:"/mlops-pipeline/category/developer-guide"},next:{title:"Development Setup",permalink:"/mlops-pipeline/developer-guide/development_setup"}},p={},s=[{value:"MLOps pipeline",id:"mlops-pipeline",level:2},{value:"CI/CD",id:"cicd",level:2},{value:"Orchestration",id:"orchestration",level:2},{value:"Experiment Tracking",id:"experiment-tracking",level:2},{value:"Data Repository",id:"data-repository",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"welcome"},"Welcome"),(0,i.kt)("h2",{id:"mlops-pipeline"},"MLOps pipeline"),(0,i.kt)("p",null,"The MLOps pipeline is currently developed and maintained on the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ZHAW-certAInty/toolbox"},"GitHub repository")," of the certAInty project."),(0,i.kt)("h2",{id:"cicd"},"CI/CD"),(0,i.kt)("p",null,"CI/CD is implemented using ",(0,i.kt)("a",{parentName:"p",href:"github_actions"},"GitHub Actions"),". The pipeline is triggered by a push to the ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeline")," branch and consists of the following steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Entrypoint"),": The pipeline is triggered by a push to the pipeline branch."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Pushing the Model to DGX"),": The model is pushed to the DGX server.")),(0,i.kt)("h2",{id:"orchestration"},"Orchestration"),(0,i.kt)("p",null,"Within the pipeline, the ML specific workflow is orchestrated by ",(0,i.kt)("a",{parentName:"p",href:"airflow"},"Airflow"),". Airflow initiates the following tasks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data Versioning"),": The data is cloned respectively pulled from the data repository."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data Validation"),": The data is validated to ensure that it is of the correct format and that it is not corrupted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Data Transformation"),": The data is transformed into the format required by the ML model."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Model Training"),": The ML model is trained using the transformed data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Model Validation"),": The ML model is validated to ensure that it is performing as expected.")),(0,i.kt)("h2",{id:"experiment-tracking"},"Experiment Tracking"),(0,i.kt)("p",null,"Experiment tracking is done using ",(0,i.kt)("a",{parentName:"p",href:"mlflow"},"MLflow"),". MLflow is responsible for the following tasks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tracking the Model"),": The ML model is tracked using MLflow."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tracking the Model Parameters"),": The model parameters are tracked using MLflow."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tracking the Model Metrics"),": The model metrics are tracked using MLflow."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tracking the Model Artifacts"),": The model artifacts are tracked using MLflow.")),(0,i.kt)("h2",{id:"data-repository"},"Data Repository"),(0,i.kt)("p",null,"We utilize ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oxen.ai/getting-started/intro"},"Oxen")," as a framework to create and manage the data repository.\nThrough versioning, datasets can be effectively tracked, managed, and compared over time."))}u.isMDXComponent=!0}}]);